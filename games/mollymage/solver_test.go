package mollymage

/*-
 * #%L
 * Codenjoy - it's a dojo-like platform from developers to developers.
 * %%
 * Copyright (C) 2021 Codenjoy
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import (
	"strings"
	"testing"

	"github.com/codenjoyme/codenjoy-go-client/direction"
	"github.com/codenjoyme/codenjoy-go-client/engine"
	"github.com/stretchr/testify/assert"
)

func TestBestRoute(t *testing.T) {
	testCases := []struct {
		board       []string
		notExpected []direction.Side
	}{
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼    #  ###         # ☼",
				"☼      #    #  # ###  ☼",
				"☼       #   # #      &☼",
				"☼     #  #  #  #    # ☼",
				"☼         #    ♥  &   ☼",
				"☼   #              # #☼",
				"☼  #                  ☼",
				"☼  &    #  ♥          ☼",
				"☼   # #    #          ☼",
				"☼                ##  #☼",
				"☼& ###  #   #      &  ☼",
				"☼ #                   ☼",
				"☼                     ☼",
				"☼# ##                 ☼",
				"☼ #                   ☼",
				"☼                     ☼",
				"☼    #               #☼",
				"☼      #    #   #     ☼",
				"☼♥    # ☺ #           ☼",
				"☼  #    1         #   ☼",
				"☼      #   #          ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Down},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼    #  ###         # ☼",
				"☼      # ♥  #  # ###  ☼",
				"☼&      #   # #       ☼",
				"☼     #     +  #    # ☼",
				"☼      &           ☻  ☼",
				"☼   #     ♥        # #☼",
				"☼  #                  ☼",
				"☼       #    #       &☼",
				"☼   # #    #          ☼",
				"☼              ♥ ##  #☼",
				"☼  ###      #         ☼",
				"☼ #                   ☼",
				"☼           &         ☼",
				"☼# ##                 ☼",
				"☼ #     &             ☼",
				"☼                     ☼",
				"☼   ##               #☼",
				"☼      #    #   #     ☼",
				"☼  #  #   #           ☼",
				"☼  #              #   ☼",
				"☼      #   #         #☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Down},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼  & #  ###         # ☼",
				"☼    & #    # ♥# ##   ☼",
				"☼       #   # #       ☼",
				"☼     #        #    # ☼",
				"☼                     ☼",
				"☼ & #                #☼",
				"☼  #    #             ☼",
				"☼       #    #   #    ☼",
				"☼   # #    #       #  ☼",
				"☼       #        ##  #☼",
				"☼  ###      #         ☼",
				"☼ #                   ☼",
				"☼                ♥    ☼",
				"☼# ##                 ☼",
				"☼ #        &        & ☼",
				"☼                     ☼",
				"☼   ##               #☼",
				"☼      #       ♥#     ☼",
				"☼  #  #   #           ☼",
				"☼  #              #   ☼",
				"☼      #          ☻  #☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Down},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼    #  ###        ## ☼",
				"☼      #    #  # ##   ☼",
				"☼   #   #   # #       ☼",
				"☼     #  #     #    #♥☼",
				"☼                     ☼",
				"☼   #       &        #☼",
				"☼  #    #♥     #      ☼",
				"☼&      #    #   # #  ☼",
				"☼   # #    #       #  ☼",
				"☼       #        ##☻ #☼",
				"☼  ###      #         ☼",
				"☼ #                   ☼",
				"☼                     ☼",
				"☼# ##                 ☼",
				"☼ #                   ☼",
				"☼                &    ☼",
				"☼   ##              &#☼",
				"☼      #&             ☼",
				"☼         #           ☼",
				"☼  #      ♥           ☼",
				"☼      #              ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop, direction.Left},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼        ##        ## ☼",
				"☼              #♥###  ☼",
				"☼           &&       #☼",
				"☼                   #♥☼",
				"☼                   3☺☼",
				"☼   #                #☼",
				"☼  # #                ☼",
				"☼##♥    #             ☼",
				"☼   # #    #          ☼",
				"☼  #   ## #     #     ☼",
				"☼  ###                ☼",
				"☼ # #                 ☼",
				"☼ #      #         #  ☼",
				"☼# ##             #   ☼",
				"☼ #               #   ☼",
				"☼                     ☼",
				"☼   ##     &     #   #☼",
				"☼   #  #              ☼",
				"☼         # #         ☼",
				"☼  #     &  #         ☼",
				"☼  ##  #  &           ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼       &  #       ## ☼",
				"☼  #    #   #♥        ☼",
				"☼          #          ☼",
				"☼        # #   #    ♥ ☼",
				"☼ ##  #        ♠      ☼",
				"☼                     ☼",
				"☼      #     ♥♥       ☼",
				"☼♥##  # &             ☼",
				"☼ +     #  #A         ☼",
				"☼ #     #   # &       ☼",
				"☼#             #      ☼",
				"☼   r                 ☼",
				"☼      &           &  ☼",
				"☼   ♥       ♥         ☼",
				"☼       #  #   #      ☼",
				"☼       #    #  #A  #4☼",
				"☼                   #☺☼",
				"☼#  ##       ♥ ##    #☼",
				"☼      #             #☼",
				"☼#   ####    ♥        ☼",
				"☼# #♥#    # #       ##☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼     # ##      ♥   # ☼",
				"☼   #  ♥   ♥ ♥#     # ☼",
				"☼                #    ☼",
				"☼     ##    &    #  # ☼",
				"☼ ♥#  #            #  ☼",
				"☼  ♥      #          &☼",
				"☼    #          &     ☼",
				"☼ #    &  ♥         # ☼",
				"☼###        #  ☺ &    ☼",
				"☼           ҉  4 #    ☼",
				"☼##         ҉ ##      ☼",
				"☼           ҉         ☼",
				"☼         H҉♣H        ☼",
				"☼      #    ҉         ☼",
				"☼ #  #      ҉   #     ☼",
				"☼  # #      ҉ #  ♥ # #☼",
				"☼    ♥#            # #☼",
				"☼   # #               ☼",
				"☼                 #  ♥☼",
				"☼             #       ☼",
				"☼#  ##         #  #  #☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Right},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼    ♥ ## #      ♥  & ☼",
				"☼ &      # #        ♥ ☼",
				"☼☺ #                # ☼",
				"☼         #           ☼",
				"☼         &     r  #  ☼",
				"☼    #        ##    ♥ ☼",
				"☼                   # ☼",
				"☼       ♥         ### ☼",
				"☼      #              ☼",
				"☼                  & #☼",
				"☼                #♥♥  ☼",
				"☼#     ♥  ## #        ☼",
				"☼       # &      ##  #☼",
				"☼       #   # #       ☼",
				"☼   #        #       #☼",
				"☼ #   ♥     #     ##  ☼",
				"☼#         ## #     # ☼",
				"☼##       #         # ☼",
				"☼  ##            #   #☼",
				"☼                     ☼",
				"☼#               # ♠  ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Right, direction.Up, direction.Left},
		},

		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼#&&   #       ♥  ♥ # ☼",
				"☼  #             #    ☼",
				"☼          c          ☼",
				"☼     #               ☼",
				"☼      &              ☼",
				"☼#   # #     #        ☼",
				"☼        #      #     ☼",
				"☼     &  #         #T ☼",
				"☼ #  #♥# #      ##    ☼",
				"☼#           ##       ☼",
				"☼♥               #  ♥ ☼",
				"☼##       #         # ☼",
				"☼# ## ♥  ♥  ##   #    ☼",
				"☼             #       ☼",
				"☼   #                 ☼",
				"☼  #                  ☼",
				"☼           # #       ☼",
				"☼# ♥ # ♥  #   #       ☼",
				"☼ ##♥#   #           #☼",
				"☼     #          +  ☺ ☼",
				"☼&       ## #  ♠      ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼#  &   &  # &#  #  # ☼",
				"☼           #    #    ☼",
				"☼#   ♥    #           ☼",
				"☼    ###    ♥     # ##☼",
				"☼                     ☼",
				"☼#  ##                ☼",
				"☼#                    ☼",
				"☼       #     ♥ #     ☼",
				"☼ #  c   T       #    ☼",
				"☼       #    ##  #♥& #☼",
				"☼#           ♥        ☼",
				"☼#       #   # #      ☼",
				"☼#   #       # ♥#     ☼",
				"☼             #♥  #   ☼",
				"☼        # #          ☼",
				"☼      ## #           ☼",
				"☼  #        #         ☼",
				"☼        &          ##☼",
				"☼  #     ♥  #   ♥    #☼",
				"☼              rT ♥ # ☼",
				"☼         ♥        3☺ ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop, direction.Left, direction.Down, direction.Up},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼☺        # #    # #  ☼",
				"☼       #     #       ☼",
				"☼          ♥         ♥☼",
				"☼       ♥       ##T   ☼",
				"☼        #            ☼",
				"☼     #          ##   ☼",
				"☼  #    ##            ☼",
				"☼                 &#  ☼",
				"☼  ## #         # #   ☼",
				"☼   ##       # #  ♥ # ☼",
				"☼ #   #     #    &    ☼",
				"☼           #         ☼",
				"☼    #        # #     ☼",
				"☼             ♥    ## ☼",
				"☼            ##       ☼",
				"☼  ♥   #            #♥☼",
				"☼ #         #        ♥☼",
				"☼     #   ## ♥   #   ♥☼",
				"☼           &      ###☼",
				"☼ #    #     #   ♥   #☼",
				"☼&                &   ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop, direction.Left, direction.Up},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼ #           #       ☼",
				"☼                     ☼",
				"☼  &1    # #    ♥#   #☼",
				"☼  x ♥# #     ###     ☼",
				"☼  ♥  #     &         ☼",
				"☼               #    #☼",
				"☼         # ##       #☼",
				"☼    #   #          &#☼",
				"☼            1 #     #☼",
				"☼    #                ☼",
				"☼ ##    #   ☺  ♥ ##  #☼",
				"☼   #  #    c  #    # ☼",
				"☼                     ☼",
				"☼       &           ##☼",
				"☼              #   ## ☼",
				"☼                #    ☼",
				"☼   #          #   ## ☼",
				"☼  &            #    #☼",
				"☼#                    ☼",
				"☼        #          ##☼",
				"☼#              #     ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼## #                 ☼",
				"☼       #             ☼",
				"☼  #          c  #   #☼",
				"☼         # # #  #  # ☼",
				"☼             5  #    ☼",
				"☼         #   ☺       ☼",
				"☼  #  #          ###  ☼",
				"☼        &   ♥        ☼",
				"☼            1  #   # ☼",
				"☼  #  # #             ☼",
				"☼       # #      #    ☼",
				"☼       #     #  #    ☼",
				"☼#          &        #☼",
				"☼ #    # ##    &      ☼",
				"☼  #     # & #    #   ☼",
				"☼#      #             ☼",
				"☼        #          & ☼",
				"☼         #     #  ## ☼",
				"☼   #          #      ☼",
				"☼#                    ☼",
				"☼       #       #     ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Left},
		},
		{
			board: []string{

				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼     ☼         #☼ # #☼",
				"☼ # # ☼ #     #  ☼    ☼",
				"☼   # ☼   ☼   #☼☼☼   &☼",
				"☼#    ☼   ☼   & #☼ #  ☼",
				"☼   # ☼☼☼☼☼☼ #   ☼☼   ☼",
				"☼#      ☼             ☼",
				"☼☼☼   # ☼#  ☼  ##     ☼",
				"☼   &       ☼ #  ☼    ☼",
				"☼##         ☼ #  ☼  # ☼",
				"☼☼☼☼☼☼☼☼    ☼☼☼☼☼☼  # ☼",
				"☼# #  ☼     ☼    #    ☼",
				"☼ #   ☼     ☼   # #   ☼",
				"☼ # # ☼     ☼     ☼ # ☼",
				"☼#   #            ☼ # ☼",
				"☼         ☼    ☼☼☼☼☼☼☼☼",
				"☼  #☼ ## &☼       ☼   ☼",
				"☼   ☼     ☼  #    ☼#  ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼   # ♥  ☼",
				"☼#   #☼    # &        ☼",
				"☼ #   ☼#      ☼     # ☼",
				"☼☺ #  #    #  ☼       ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop},
		},

		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼            ###      ☼",
				"☼ ☼☼ ☼☼☼☼ ☼  ☼☼ ☼☼  ☼ ☼",
				"☼ ☼☼      ☼☼ ☼☼ ☼☼&☼☼ ☼",
				"☼#    ☼☼☼  ☼ ♥   ☻  ☼#☼",
				"☼ ☼☼☼   ☼    ☼☼☼☼ ☼#  ☼",
				"☼  ☼  ☼ ##☼☼   i #☼☼☼ ☼",
				"☼     ☼☼☼  ☼☼  #☼     ☼",
				"☼ ☼☼☼ # # #    ☼☼☼  ☼ ☼",
				"☼# ☼  ☼☼☼☼ ☼☼☼   # ☼☼#☼",
				"☼#   #      ☼   ☼  #☼ ☼",
				"☼ ☼☼☼☼#☼☼ ☼ &#☼☼☼ ☼ # ☼",
				"☼    # ☼☼ ☼☼☼   ##☼☼☼ ☼",
				"☼ ☼☼☼#    ##& ☼☼☼   # ☼",
				"☼  ☼ #☼☼ ☼☼☼   ☼  ☼☼☼&☼",
				"☼    ☼☼  # ☼#☼      ☼ ☼",
				"☼ ☼      ☼   ☼☼☼#☼☼ ##☼",
				"☼#☼ #☼☼  ☼☼      ☼☼ ☼#☼",
				"☼ ☼☼ ☼☼#  ☼ ☼☼☼☼    ☼ ☼",
				"☼   #   ☼# # #   ☼☼#☼ ☼",
				"☼ ☼☼☼☼#☼☼☼ ☼☼☼☼#☼☼♥ ☼ ☼",
				"☼##  &    ##  # #     ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Down},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼    # ##          ##&☼",
				"☼&☼☼ ☼☼☼☼ ☼♥ ☼☼ ☼☼  ☼ ☼",
				"☼ ☼☼   ## ☼☼#☼☼ ☼☼ ☼☼#☼",
				"☼    #☼☼☼  ☼     &  ☼ ☼",
				"☼ ☼☼☼#  ☼#   ☼☼☼☼ ☼   ☼",
				"☼ ♥☼##☼  #☼☼#  ## ☼☼☼ ☼",
				"☼     ☼☼☼  ☼☼#  ☼  #  ☼",
				"☼ ☼☼☼  ####  ♥ ☼☼☼  ☼ ☼",
				"☼  ☼ #☼☼☼☼ ☼☼☼     ☼☼#☼",
				"☼&♥     #   ☼  #☼   ☼#☼",
				"☼ ☼☼☼☼ ☼☼#☼  #☼☼☼ ☼   ☼",
				"☼      ☼☼ ☼☼☼     ☼☼☼ ☼",
				"☼ ☼☼☼    ☻   #☼☼☼ #♥##☼",
				"☼  ☼  ☼☼ ☼☼☼   ☼ #☼☼☼ ☼",
				"☼    ☼☼#   ☼ ☼      ☼ ☼",
				"☼ ☼     #☼ & ☼☼☼#☼☼   ☼",
				"☼ ☼  ☼☼# ☼☼  # ♥ ☼☼ ☼ ☼",
				"☼ ☼☼ ☼☼   ☼ ☼☼☼☼ #  ☼ ☼",
				"☼       ☼ # ## # ☼☼ ☼ ☼",
				"☼ ☼☼☼☼#☼☼☼#☼☼☼☼ ☼☼  ☼#☼",
				"☼    ###              ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Up},
		},

		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼#  ##    #       &   ☼",
				"☼& #  #               ☼",
				"☼      #              ☼",
				"☼ ##   #         #    ☼",
				"☼   #      ##        #☼",
				"☼  #                  ☼",
				"☼#                 # #☼",
				"☼    ##             & ☼",
				"☼ #  #          #     ☼",
				"☼   #   #          #  ☼",
				"☼#                    ☼",
				"☼            #   ###  ☼",
				"☼###     #          # ☼",
				"☼        &           #☼",
				"☼                 ♥  #☼",
				"☼  #   #     i   2   #☼",
				"☼     #           ☻ # ☼",
				"☼     #  #          A ☼",
				"☼        #            ☼",
				"☼ # ##  #             ☼",
				"☼                   #&☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{},
		},

		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼#  ##    #      &    ☼",
				"☼  #  #               ☼",
				"☼&     #              ☼",
				"☼ ##   #         #    ☼",
				"☼   #      ##        #☼",
				"☼  #                  ☼",
				"☼#                 #&#☼",
				"☼    ##               ☼",
				"☼ #  #          #     ☼",
				"☼   #   #          #  ☼",
				"☼#                    ☼",
				"☼            #   ###  ☼",
				"☼###     #          # ☼",
				"☼         &          #☼",
				"☼                  ♥ #☼",
				"☼  #   #     i   1☺  #☼",
				"☼     #           3 # ☼",
				"☼     #  #          A ☼",
				"☼        #            ☼",
				"☼ # ##  #            &☼",
				"☼                   # ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Right},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼ #  #  #     #  #    ☼",
				"☼ ☼☼ ☼☼☼☼ ☼ #☼☼ ☼☼  ☼ ☼",
				"☼ ☼☼    ##☼☼ ☼☼ ☼☼ ☼☼ ☼",
				"☼&    ☼☼☼  ☼        ☼ ☼",
				"☼ ☼☼☼#  ☼   &☼☼☼☼ ☼ ##☼",
				"☼##☼  ☼ # ☼☼# #   ☼☼☼ ☼",
				"☼     ☼☼☼  ☼☼   ☼ #   ☼",
				"☼ ☼☼☼##  &☺  2 ☼☼☼  ☼#☼",
				"☼ #☼  ☼☼☼☼ ☼☼☼  # ♥☼☼ ☼",
				"☼ &        #☼ ♥ ☼ 2#☼ ☼",
				"☼#☼☼☼☼ ☼☼ ☼ # ☼☼☼ ☼   ☼",
				"☼      ☼☼ ☼☼☼   #♥☼☼☼ ☼",
				"☼ ☼☼☼# ###  ##☼☼☼   #4☼",
				"☼  ☼  ☼☼ ☼☼☼  #☼ #☼☼☼♥☼",
				"☼  # ☼☼    ☼ ☼    # ☼ ☼",
				"☼ ☼#     ☼   ☼☼☼ ☼☼   ☼",
				"☼ ☼ #☼☼ #☼☼#     ☼☼#☼ ☼",
				"☼ ☼☼ ☼☼  #☼#☼☼☼☼ #  ☼ ☼",
				"☼       ☼    ♠#  ☼☼ ☼&☼",
				"☼ ☼☼☼☼ ☼☼☼#☼☼☼☼ ☼☼# ☼ ☼",
				"☼  ♥  #     ##       ♥☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼ #  #  #     #  #    ☼",
				"☼ ☼☼ ☼☼☼☼ ☼ #☼☼ ☼☼  ☼ ☼",
				"☼ ☼☼    ##☼☼ ☼☼ ☼☼ ☼☼ ☼",
				"☼&    ☼☼☼  ☼        ☼ ☼",
				"☼ ☼☼☼#  ☼   &☼☼☼☼ ☼ ##☼",
				"☼##☼  ☼ # ☼☼# #   ☼☼☼ ☼",
				"☼     ☼☼☼  ☼☼   ☼ #   ☼",
				"☼ ☼☼☼##  &☺  1 ☼☼☼  ☼#☼",
				"☼ #☼  ☼☼☼☼ ☼☼☼  # ♥☼☼ ☼",
				"☼ &        #☼ ♥ ☼ 2#☼ ☼",
				"☼#☼☼☼☼ ☼☼ ☼ # ☼☼☼ ☼   ☼",
				"☼      ☼☼ ☼☼☼   #♥☼☼☼ ☼",
				"☼ ☼☼☼# ###  ##☼☼☼   #4☼",
				"☼  ☼  ☼☼ ☼☼☼  #☼ #☼☼☼♥☼",
				"☼  # ☼☼    ☼ ☼    # ☼ ☼",
				"☼ ☼#     ☼   ☼☼☼ ☼☼   ☼",
				"☼ ☼ #☼☼ #☼☼#     ☼☼#☼ ☼",
				"☼ ☼☼ ☼☼  #☼#☼☼☼☼ #  ☼ ☼",
				"☼       ☼    ♠#  ☼☼ ☼&☼",
				"☼ ☼☼☼☼ ☼☼☼#☼☼☼☼ ☼☼# ☼ ☼",
				"☼  ♥  #     ##       ♥☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼ #  #  #     #  #    ☼",
				"☼ ☼☼ ☼☼☼☼ ☼ #☼☼ ☼☼  ☼ ☼",
				"☼ ☼☼    ##☼☼ ☼☼ ☼☼ ☼☼ ☼",
				"☼&    ☼☼☼  ☼        ☼ ☼",
				"☼ ☼☼☼#  ☼   &☼☼☼☼ ☼ ##☼",
				"☼##☼  ☼ # ☼☼# #   ☼☼☼ ☼",
				"☼     ☼☼☼& ☼☼   ☼ #   ☼",
				"☼ ☼☼☼##   ☺  1 ☼☼☼  ☼#☼",
				"☼ #☼  ☼☼☼☼ ☼☼☼  # ♥☼☼ ☼",
				"☼ &        #☼ ♥ ☼ 2#☼ ☼",
				"☼#☼☼☼☼ ☼☼ ☼ # ☼☼☼ ☼   ☼",
				"☼      ☼☼ ☼☼☼   #♥☼☼☼ ☼",
				"☼ ☼☼☼# ###  ##☼☼☼   #4☼",
				"☼  ☼  ☼☼ ☼☼☼  #☼ #☼☼☼♥☼",
				"☼  # ☼☼    ☼ ☼    # ☼ ☼",
				"☼ ☼#     ☼   ☼☼☼ ☼☼   ☼",
				"☼ ☼ #☼☼ #☼☼#     ☼☼#☼ ☼",
				"☼ ☼☼ ☼☼  #☼#☼☼☼☼ #  ☼ ☼",
				"☼       ☼    ♠#  ☼☼ ☼&☼",
				"☼ ☼☼☼☼ ☼☼☼#☼☼☼☼ ☼☼# ☼ ☼",
				"☼  ♥  #     ##       ♥☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼    #  ###         # ☼",
				"☼      #    #  # ###  ☼",
				"☼       #   # #      &☼",
				"☼     #  #  #  #    # ☼",
				"☼         #    ♥  &   ☼",
				"☼   #              # #☼",
				"☼  #                  ☼",
				"☼  &    #  ♥          ☼",
				"☼   # #    #          ☼",
				"☼                ##  #☼",
				"☼& ###  #   #      &  ☼",
				"☼ #                   ☼",
				"☼                     ☼",
				"☼# ##                 ☼",
				"☼ #                   ☼",
				"☼                     ☼",
				"☼    #               #☼",
				"☼      #    #   #     ☼",
				"☼♥    # ☺ #           ☼",
				"☼  #    1         #   ☼",
				"☼      #   #          ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Down, direction.Up},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼ # ♥     ♥# #        ☼",
				"☼ ☼☼ ☼☼☼☼ ☼# ☼☼ ☼☼& ☼#☼",
				"☼#☼☼     ♥☼☼ ☼☼#☼☼#☼☼#☼",
				"☼     ☼☼☼  ☼       #☼ ☼",
				"☼#☼☼☼   ☼    ☼☼☼☼ ☼   ☼",
				"☼# ☼# ☼#  ☼☼ #  # ☼☼☼ ☼",
				"☼  ## ☼☼☼# ☼☼ # ☼  &  ☼",
				"☼ ☼☼☼# ##   ###☼☼☼  ☼#☼",
				"☼  ☼# ☼☼☼☼ ☼☼☼     ☼☼#☼",
				"☼           ☼  #☼  #☼ ☼",
				"☼ ☼☼☼☼ ☼☼ ☼ # ☼☼☼ ☼ # ☼",
				"☼  #   ☼☼#☼☼☼     ☼☼☼#☼",
				"☼#☼☼☼      &  ☼☼☼     ☼",
				"☼  ☼  ☼☼ ☼☼☼   ☼  ☼☼☼ ☼",
				"☼   #☼☼    ☼ ☼      ☼ ☼",
				"☼#☼      ☼   ☼☼☼ ☼☼   ☼",
				"☼ ☼ #☼☼  ☼☼  2 ☺ ☼☼ ☼ ☼",
				"☼ ☼☼ ☼☼#  ☼ ☼☼☼☼&  #☼ ☼",
				"☼      #☼        ☼☼#☼#☼",
				"☼ ☼☼☼☼ ☼☼☼ ☼☼☼☼#☼☼  ☼ ☼",
				"☼   #  # #  #   #& #  ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼ # ♥     ♥# #        ☼",
				"☼ ☼☼ ☼☼☼☼ ☼# ☼☼ ☼☼& ☼#☼",
				"☼#☼☼     ♥☼☼ ☼☼#☼☼#☼☼#☼",
				"☼     ☼☼☼  ☼       #☼ ☼",
				"☼#☼☼☼   ☼    ☼☼☼☼ ☼   ☼",
				"☼# ☼# ☼#  ☼☼ #  # ☼☼☼ ☼",
				"☼  ## ☼☼☼# ☼☼ # ☼  &  ☼",
				"☼ ☼☼☼# ##   ###☼☼☼  ☼#☼",
				"☼  ☼# ☼☼☼☼ ☼☼☼     ☼☼#☼",
				"☼           ☼  #☼  #☼ ☼",
				"☼ ☼☼☼☼ ☼☼ ☼ # ☼☼☼ ☼ # ☼",
				"☼  #   ☼☼#☼☼☼     ☼☼☼#☼",
				"☼#☼☼☼      &  ☼☼☼     ☼",
				"☼  ☼  ☼☼ ☼☼☼   ☼  ☼☼☼ ☼",
				"☼   #☼☼    ☼ ☼      ☼ ☼",
				"☼#☼      ☼   ☼☼☼ ☼☼   ☼",
				"☼ ☼ #☼☼ H        ☼☼ ☼ ☼",
				"☼ ☼☼ ☼☼#☺   ☼☼☼☼&  #☼ ☼",
				"☼      # 3       ☼☼#☼#☼",
				"☼ ☼☼☼☼     ☼☼☼☼#☼☼  ☼ ☼",
				"☼   #  # #  #   #& #  ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop, direction.Up},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼     ☼&# #  ##  ☼#   ☼",
				"☼     ☼  ###   ##☼    ☼",
				"☼ #   ☼   ☼    ☼☼☼    ☼",
				"☼     ☼   ☼# #   ☼# # ☼",
				"☼     ☼☼☼☼☼☼     ☼☼   ☼",
				"☼#      ☼        #  ##☼",
				"☼☼☼     ☼   ☼      &  ☼",
				"☼           ☼    ☼  # ☼",
				"☼           ☼    ☼3&#&☼",
				"☼☼☼☼☼☼☼☼    ☼☼☼☼☼☼☺  #☼",
				"☼     ☼     ☼       # ☼",
				"☼     ☼     ☼       # ☼",
				"☼#  # ☼     ☼     ☼   ☼",
				"☼   #  #      #   ☼ ♥#☼",
				"☼   #     ☼    ☼☼☼☼☼☼☼☼",
				"☼   ☼###  ☼♥      ☼   ☼",
				"☼  #☼ #   ☼#  # # ☼   ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼    #  #☼",
				"☼  # #☼ ##     #      ☼",
				"☼ #   ☼       ☼  # #  ☼",
				"☼  & # #      ☼   #   ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop, direction.Right},
		},
		{
			board: []string{
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				"☼ #  #          &#  ##☼",
				"☼                     ☼",
				"☼ #A               ## ☼",
				"☼                     ☼",
				"☼                     ☼",
				"☼        ♥        # ##☼",
				"☼     #    #    ##   #☼",
				"☼   #   1         #   ☼",
				"☼      # 2 # ##   #  #☼",
				"☼     & ☺   +#        ☼",
				"☼ #         #         ☼",
				"☼   ♥#       &  #     ☼",
				"☼   #   ♥ &        #  ☼",
				"☼# #   # 1            ☼",
				"☼#                #   ☼",
				"☼  #   #      #     # ☼",
				"☼ ##  r        #    # ☼",
				"☼             &       ☼",
				"☼             #  #    ☼",
				"☼♥    #     # #     # ☼",
				"☼        #     #      ☼",
				"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
			},
			notExpected: []direction.Side{direction.Stop, direction.Down, direction.Left},
		},
	}

	for _, test := range testCases {
		t.Run("", func(t *testing.T) {
			board := buildBoard(test.board...)

			for _, side := range test.notExpected {
				bestSide := findBestRoute(NewSolver(), board, board.findHero())
				assert.NotEqual(t, side, bestSide, "move=%s", side.String())
			}
		})
	}

}

func TestBestSequenceRoute(t *testing.T) {
	testCases := []struct {
		boards   [][]string
		expected []engine.Action
	}{
		{
			boards: [][]string{
				{
					"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
					"☼    #  ###         # ☼",
					"☼      #    #  # ###  ☼",
					"☼       #   # #      &☼",
					"☼     #  #  #  #    # ☼",
					"☼         #    ♥  &   ☼",
					"☼   #              # #☼",
					"☼  #                  ☼",
					"☼  &    #  ♥          ☼",
					"☼   # #    #          ☼",
					"☼                ##  #☼",
					"☼& ###  #   #      &  ☼",
					"☼ #                   ☼",
					"☼                     ☼",
					"☼# ##                 ☼",
					"☼ #                   ☼",
					"☼                     ☼",
					"☼    #               #☼",
					"☼      #    #   #     ☼",
					"☼♥    # ☺ #           ☼",
					"☼  #    2&        #   ☼",
					"☼      #   #          ☼",
					"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				},
				{
					"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
					"☼    #  ###         # ☼",
					"☼      #    #  # ###  ☼",
					"☼       #   # #      &☼",
					"☼     #  #  #  #    # ☼",
					"☼         #    ♥  &   ☼",
					"☼   #              # #☼",
					"☼  #                  ☼",
					"☼  &    #  ♥          ☼",
					"☼   # #    #          ☼",
					"☼                ##  #☼",
					"☼& ###  #   #      &  ☼",
					"☼ #                   ☼",
					"☼                     ☼",
					"☼# ##                 ☼",
					"☼ #                   ☼",
					"☼                     ☼",
					"☼    ###             #☼",
					"☼      #    #   #     ☼",
					"☼♥    # ☺ #           ☼",
					"☼  #    &         #   ☼",
					"☼      #   #          ☼",
					"☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼",
				},
			},
			expected: []engine.Action{left, right},
		},
	}

	for _, test := range testCases {
		t.Run("", func(t *testing.T) {
			solver := NewSolver()

			lastAction := act
			for _, board := range test.boards {
				board := buildBoard(board...)
				lastAction = nextAction(solver, board)
			}

			for _, act := range test.expected {
				// may contain ACT
				if strings.Contains(lastAction.String(), act.String()) {
					return
				}
			}

			assert.Fail(t, "actions were not matched", "%s=%v", lastAction, test.expected)
		})
	}

}

func buildBoard(lines ...string) *board {
	b := strings.Builder{}
	b.WriteString("board=")
	for _, line := range lines {
		b.WriteString(line)
	}

	return newBoard(b.String())
}
